/*
    staHB is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    staHB is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with staHB.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_bivariate_probit_mixed_onec_mo_nonc_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bivariate_probit_mixed_onec_mo_nonc");
    reader.add_event(144, 144, "end", "model_bivariate_probit_mixed_onec_mo_nonc");
    return reader;
}

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, 1,Eigen::Dynamic>
binormal_cdf_vector(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& z,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& rho, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 8;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(rho));
        current_statement_begin__ = 9;
        validate_non_negative_index("denom", "n", n);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  denom(static_cast<Eigen::VectorXd::Index>(n));
        (void) denom;  // dummy to suppress unused var warning

        stan::math::initialize(denom, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(denom,DUMMY_VAR__);
        stan::math::assign(denom,sqrt(elt_multiply(add(1.0,rho),subtract(1.0,rho))));
        current_statement_begin__ = 10;
        validate_non_negative_index("a1", "n", n);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  a1(static_cast<Eigen::VectorXd::Index>(n));
        (void) a1;  // dummy to suppress unused var warning

        stan::math::initialize(a1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(a1,DUMMY_VAR__);
        stan::math::assign(a1,elt_divide(subtract(elt_divide(col(z,2),col(z,1)),rho),denom));
        current_statement_begin__ = 11;
        validate_non_negative_index("a2", "n", n);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  a2(static_cast<Eigen::VectorXd::Index>(n));
        (void) a2;  // dummy to suppress unused var warning

        stan::math::initialize(a2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(a2,DUMMY_VAR__);
        stan::math::assign(a2,elt_divide(subtract(elt_divide(col(z,1),col(z,2)),rho),denom));
        current_statement_begin__ = 12;
        validate_non_negative_index("product", "n", n);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  product(static_cast<Eigen::VectorXd::Index>(n));
        (void) product;  // dummy to suppress unused var warning

        stan::math::initialize(product, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(product,DUMMY_VAR__);
        stan::math::assign(product,elt_multiply(col(z,1),col(z,2)));
        current_statement_begin__ = 13;
        validate_non_negative_index("z_probit", "n", n);
        validate_non_negative_index("z_probit", "2", 2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z_probit(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(2));
        (void) z_probit;  // dummy to suppress unused var warning

        stan::math::initialize(z_probit, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z_probit,DUMMY_VAR__);
        stan::math::assign(z_probit,Phi(z));
        current_statement_begin__ = 14;
        fun_scalar_t__ delta;
        (void) delta;  // dummy to suppress unused var warning

        stan::math::initialize(delta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(delta,DUMMY_VAR__);
        current_statement_begin__ = 15;
        validate_non_negative_index("out", "n", n);
        Eigen::Matrix<fun_scalar_t__,1,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(n));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(out,DUMMY_VAR__);


        current_statement_begin__ = 17;
        for (int i = 1; i <= n; ++i) {

            current_statement_begin__ = 18;
            if (as_bool(logical_eq(get_base1(rho,i,"rho",1),1))) {

                current_statement_begin__ = 19;
                stan::math::assign(get_base1_lhs(out,i,"out",1), min(row(z_probit,i)));
            } else if (as_bool(logical_eq(get_base1(rho,i,"rho",1),-(1)))) {

                current_statement_begin__ = 21;
                stan::math::assign(get_base1_lhs(out,i,"out",1), (sum(row(z_probit,i)) - 1));
            } else if (as_bool(logical_eq(get_base1(rho,i,"rho",1),0))) {

                current_statement_begin__ = 23;
                stan::math::assign(get_base1_lhs(out,i,"out",1), prod(row(z_probit,i)));
            } else if (as_bool((primitive_value(logical_eq(get_base1(z,i,1,"z",1),0)) && primitive_value(logical_eq(get_base1(z,i,2,"z",1),0))))) {

                current_statement_begin__ = 25;
                stan::math::assign(get_base1_lhs(out,i,"out",1), (0.25 + (asin(get_base1(rho,i,"rho",1)) / (2.0 * stan::math::pi()))));
            } else {

                current_statement_begin__ = 27;
                stan::math::assign(delta, (primitive_value(logical_lt(get_base1(product,i,"product",1),0)) || primitive_value((primitive_value(logical_eq(get_base1(product,i,"product",1),0)) && primitive_value(logical_lt((get_base1(z,i,1,"z",1) + get_base1(z,i,2,"z",1)),0))))));
                current_statement_begin__ = 28;
                stan::math::assign(get_base1_lhs(out,i,"out",1), (((0.5 * ((get_base1(z_probit,i,1,"z_probit",1) + get_base1(z_probit,i,2,"z_probit",1)) - delta)) - owens_t(get_base1(z,i,1,"z",1),get_base1(a1,i,"a1",1))) - owens_t(get_base1(z,i,2,"z",1),get_base1(a2,i,"a2",1))));
            }
        }
        current_statement_begin__ = 31;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct binormal_cdf_vector_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& z,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& rho, std::ostream* pstream__) const {
        return binormal_cdf_vector(z, rho, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, 1,Eigen::Dynamic>
biprobit_lpdf_vector(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& Y,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& mu,
                         const T2__& rho, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 34;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(Y));
        current_statement_begin__ = 35;
        validate_non_negative_index("q", "n", n);
        validate_non_negative_index("q", "2", 2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  q(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(2));
        (void) q;  // dummy to suppress unused var warning

        stan::math::initialize(q, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(q,DUMMY_VAR__);
        stan::math::assign(q,subtract(multiply(2.0,Y),1.0));
        current_statement_begin__ = 36;
        validate_non_negative_index("z", "n", n);
        validate_non_negative_index("z", "2", 2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(2));
        (void) z;  // dummy to suppress unused var warning

        stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z,DUMMY_VAR__);
        stan::math::assign(z,elt_multiply(q,mu));
        current_statement_begin__ = 37;
        validate_non_negative_index("rho1", "n", n);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  rho1(static_cast<Eigen::VectorXd::Index>(n));
        (void) rho1;  // dummy to suppress unused var warning

        stan::math::initialize(rho1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(rho1,DUMMY_VAR__);
        stan::math::assign(rho1,multiply(elt_multiply(col(q,1),col(q,2)),rho));


        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log(binormal_cdf_vector(z,rho1, pstream__)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct biprobit_lpdf_vector_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& Y,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& mu,
                         const T2__& rho, std::ostream* pstream__) const {
        return biprobit_lpdf_vector(Y, mu, rho, pstream__);
    }
};

#include <meta_header.hpp>
 class model_bivariate_probit_mixed_onec_mo_nonc : public prob_grad {
private:
    int n;
    int n_condition;
    int n_subject;
    vector<int> subject;
    int n_item;
    vector<int> item;
    int D;
    vector<int> condition;
    matrix_d y;
    vector_d priors;
    int n_orders;
    vector<vector<matrix_d> > X;
    row_vector_d zeroes_order;
public:
    model_bivariate_probit_mixed_onec_mo_nonc(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_bivariate_probit_mixed_onec_mo_nonc(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_bivariate_probit_mixed_onec_mo_nonc_namespace::model_bivariate_probit_mixed_onec_mo_nonc";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "n_condition", "int", context__.to_vec());
            n_condition = int(0);
            vals_i__ = context__.vals_i("n_condition");
            pos__ = 0;
            n_condition = vals_i__[pos__++];
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "n_subject", "int", context__.to_vec());
            n_subject = int(0);
            vals_i__ = context__.vals_i("n_subject");
            pos__ = 0;
            n_subject = vals_i__[pos__++];
            current_statement_begin__ = 46;
            validate_non_negative_index("subject", "n", n);
            context__.validate_dims("data initialization", "subject", "int", context__.to_vec(n));
            validate_non_negative_index("subject", "n", n);
            subject = std::vector<int>(n,int(0));
            vals_i__ = context__.vals_i("subject");
            pos__ = 0;
            size_t subject_limit_0__ = n;
            for (size_t i_0__ = 0; i_0__ < subject_limit_0__; ++i_0__) {
                subject[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "n_item", "int", context__.to_vec());
            n_item = int(0);
            vals_i__ = context__.vals_i("n_item");
            pos__ = 0;
            n_item = vals_i__[pos__++];
            current_statement_begin__ = 48;
            validate_non_negative_index("item", "n", n);
            context__.validate_dims("data initialization", "item", "int", context__.to_vec(n));
            validate_non_negative_index("item", "n", n);
            item = std::vector<int>(n,int(0));
            vals_i__ = context__.vals_i("item");
            pos__ = 0;
            size_t item_limit_0__ = n;
            for (size_t i_0__ = 0; i_0__ < item_limit_0__; ++i_0__) {
                item[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];
            current_statement_begin__ = 50;
            validate_non_negative_index("condition", "n", n);
            context__.validate_dims("data initialization", "condition", "int", context__.to_vec(n));
            validate_non_negative_index("condition", "n", n);
            condition = std::vector<int>(n,int(0));
            vals_i__ = context__.vals_i("condition");
            pos__ = 0;
            size_t condition_limit_0__ = n;
            for (size_t i_0__ = 0; i_0__ < condition_limit_0__; ++i_0__) {
                condition[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 51;
            validate_non_negative_index("y", "n", n);
            validate_non_negative_index("y", "D", D);
            context__.validate_dims("data initialization", "y", "matrix_d", context__.to_vec(n,D));
            validate_non_negative_index("y", "n", n);
            validate_non_negative_index("y", "D", D);
            y = matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(D));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_m_mat_lim__ = n;
            size_t y_n_mat_lim__ = D;
            for (size_t n_mat__ = 0; n_mat__ < y_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y_m_mat_lim__; ++m_mat__) {
                    y(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 52;
            validate_non_negative_index("priors", "7", 7);
            context__.validate_dims("data initialization", "priors", "vector_d", context__.to_vec(7));
            validate_non_negative_index("priors", "7", 7);
            priors = vector_d(static_cast<Eigen::VectorXd::Index>(7));
            vals_r__ = context__.vals_r("priors");
            pos__ = 0;
            size_t priors_i_vec_lim__ = 7;
            for (size_t i_vec__ = 0; i_vec__ < priors_i_vec_lim__; ++i_vec__) {
                priors[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "n_orders", "int", context__.to_vec());
            n_orders = int(0);
            vals_i__ = context__.vals_i("n_orders");
            pos__ = 0;
            n_orders = vals_i__[pos__++];
            current_statement_begin__ = 54;
            validate_non_negative_index("X", "n_orders", n_orders);
            validate_non_negative_index("X", "D", D);
            validate_non_negative_index("X", "n", n);
            validate_non_negative_index("X", "n_condition", n_condition);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(n_orders,D,n,n_condition));
            validate_non_negative_index("X", "n_orders", n_orders);
            validate_non_negative_index("X", "D", D);
            validate_non_negative_index("X", "n", n);
            validate_non_negative_index("X", "n_condition", n_condition);
            X = std::vector<std::vector<matrix_d> >(n_orders,std::vector<matrix_d>(D,matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(n_condition))));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_m_mat_lim__ = n;
            size_t X_n_mat_lim__ = n_condition;
            for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                    size_t X_limit_1__ = D;
                    for (size_t i_1__ = 0; i_1__ < X_limit_1__; ++i_1__) {
                        size_t X_limit_0__ = n_orders;
                        for (size_t i_0__ = 0; i_0__ < X_limit_0__; ++i_0__) {
                            X[i_0__][i_1__](m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
                }
            }

            // validate, data variables
            current_statement_begin__ = 43;
            check_greater_or_equal(function__,"n",n,0);
            current_statement_begin__ = 44;
            check_greater_or_equal(function__,"n_condition",n_condition,1);
            current_statement_begin__ = 45;
            check_greater_or_equal(function__,"n_subject",n_subject,1);
            current_statement_begin__ = 46;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                check_greater_or_equal(function__,"subject[k0__]",subject[k0__],1);
                check_less_or_equal(function__,"subject[k0__]",subject[k0__],n_subject);
            }
            current_statement_begin__ = 47;
            check_greater_or_equal(function__,"n_item",n_item,1);
            current_statement_begin__ = 48;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                check_greater_or_equal(function__,"item[k0__]",item[k0__],1);
                check_less_or_equal(function__,"item[k0__]",item[k0__],n_item);
            }
            current_statement_begin__ = 49;
            check_greater_or_equal(function__,"D",D,1);
            current_statement_begin__ = 50;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                check_greater_or_equal(function__,"condition[k0__]",condition[k0__],1);
                check_less_or_equal(function__,"condition[k0__]",condition[k0__],n_condition);
            }
            current_statement_begin__ = 51;
            check_greater_or_equal(function__,"y",y,0);
            check_less_or_equal(function__,"y",y,1);
            current_statement_begin__ = 52;
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            // initialize data variables
            current_statement_begin__ = 57;
            validate_non_negative_index("zeroes_order", "n_orders", n_orders);
            zeroes_order = row_vector_d(static_cast<Eigen::VectorXd::Index>(n_orders));
            stan::math::fill(zeroes_order,DUMMY_VAR__);
            stan::math::assign(zeroes_order,rep_row_vector(0,n_orders));


            // validate transformed data
            current_statement_begin__ = 57;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 60;
            validate_non_negative_index("condition_omega", "D", D);
            num_params_r__ += ((D * (D - 1)) / 2);
            current_statement_begin__ = 61;
            validate_non_negative_index("theta_raw", "(n_orders - 1)", (n_orders - 1));
            num_params_r__ += (n_orders - 1);
            current_statement_begin__ = 62;
        validate_non_negative_index("zeta_raw", "(n_condition - 2)", (n_condition - 2));
            validate_non_negative_index("zeta_raw", "n_orders", n_orders);
        validate_non_negative_index("zeta_raw", "D", D);
            num_params_r__ += (n_condition - 2) * n_orders * D;
            current_statement_begin__ = 63;
        validate_non_negative_index("intercept", "D", D);
            num_params_r__ += D;
            current_statement_begin__ = 64;
        validate_non_negative_index("condition_mu_raw", "D", D);
            num_params_r__ += D;
            current_statement_begin__ = 65;
            validate_non_negative_index("subject_scale", "D", D);
            num_params_r__ += D;
            current_statement_begin__ = 66;
        validate_non_negative_index("subject_mu_raw", "D", D);
            validate_non_negative_index("subject_mu_raw", "n_subject", n_subject);
            num_params_r__ += D * n_subject;
            current_statement_begin__ = 67;
            validate_non_negative_index("subject_L", "D", D);
            num_params_r__ += ((D * (D - 1)) / 2);
            current_statement_begin__ = 68;
            validate_non_negative_index("item_scale", "D", D);
            num_params_r__ += D;
            current_statement_begin__ = 69;
        validate_non_negative_index("item_mu_raw", "D", D);
            validate_non_negative_index("item_mu_raw", "n_item", n_item);
            num_params_r__ += D * n_item;
            current_statement_begin__ = 70;
            validate_non_negative_index("item_L", "D", D);
            num_params_r__ += ((D * (D - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_bivariate_probit_mixed_onec_mo_nonc() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("condition_omega")))
            throw std::runtime_error("variable condition_omega missing");
        vals_r__ = context__.vals_r("condition_omega");
        pos__ = 0U;
        validate_non_negative_index("condition_omega", "D", D);
        validate_non_negative_index("condition_omega", "D", D);
        context__.validate_dims("initialization", "condition_omega", "matrix_d", context__.to_vec(D,D));
        matrix_d condition_omega(static_cast<Eigen::VectorXd::Index>(D),static_cast<Eigen::VectorXd::Index>(D));
        for (int j2__ = 0U; j2__ < D; ++j2__)
            for (int j1__ = 0U; j1__ < D; ++j1__)
                condition_omega(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.corr_matrix_unconstrain(condition_omega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable condition_omega: ") + e.what());
        }

        if (!(context__.contains_r("theta_raw")))
            throw std::runtime_error("variable theta_raw missing");
        vals_r__ = context__.vals_r("theta_raw");
        pos__ = 0U;
        validate_non_negative_index("theta_raw", "(n_orders - 1)", (n_orders - 1));
        context__.validate_dims("initialization", "theta_raw", "vector_d", context__.to_vec((n_orders - 1)));
        vector_d theta_raw(static_cast<Eigen::VectorXd::Index>((n_orders - 1)));
        for (int j1__ = 0U; j1__ < (n_orders - 1); ++j1__)
            theta_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(theta_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_raw: ") + e.what());
        }

        if (!(context__.contains_r("zeta_raw")))
            throw std::runtime_error("variable zeta_raw missing");
        vals_r__ = context__.vals_r("zeta_raw");
        pos__ = 0U;
        validate_non_negative_index("zeta_raw", "D", D);
        validate_non_negative_index("zeta_raw", "(n_condition - 2)", (n_condition - 2));
        validate_non_negative_index("zeta_raw", "n_orders", n_orders);
        context__.validate_dims("initialization", "zeta_raw", "matrix_d", context__.to_vec(D,(n_condition - 2),n_orders));
        std::vector<matrix_d> zeta_raw(D,matrix_d(static_cast<Eigen::VectorXd::Index>((n_condition - 2)),static_cast<Eigen::VectorXd::Index>(n_orders)));
        for (int j2__ = 0U; j2__ < n_orders; ++j2__)
            for (int j1__ = 0U; j1__ < (n_condition - 2); ++j1__)
                for (int i0__ = 0U; i0__ < D; ++i0__)
                    zeta_raw[i0__](j1__,j2__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < D; ++i0__)
            try {
            writer__.matrix_unconstrain(zeta_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta_raw: ") + e.what());
        }

        if (!(context__.contains_r("intercept")))
            throw std::runtime_error("variable intercept missing");
        vals_r__ = context__.vals_r("intercept");
        pos__ = 0U;
        validate_non_negative_index("intercept", "D", D);
        context__.validate_dims("initialization", "intercept", "row_vector_d", context__.to_vec(D));
        row_vector_d intercept(static_cast<Eigen::VectorXd::Index>(D));
        for (int j1__ = 0U; j1__ < D; ++j1__)
            intercept(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(intercept);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable intercept: ") + e.what());
        }

        if (!(context__.contains_r("condition_mu_raw")))
            throw std::runtime_error("variable condition_mu_raw missing");
        vals_r__ = context__.vals_r("condition_mu_raw");
        pos__ = 0U;
        validate_non_negative_index("condition_mu_raw", "D", D);
        context__.validate_dims("initialization", "condition_mu_raw", "row_vector_d", context__.to_vec(D));
        row_vector_d condition_mu_raw(static_cast<Eigen::VectorXd::Index>(D));
        for (int j1__ = 0U; j1__ < D; ++j1__)
            condition_mu_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(condition_mu_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable condition_mu_raw: ") + e.what());
        }

        if (!(context__.contains_r("subject_scale")))
            throw std::runtime_error("variable subject_scale missing");
        vals_r__ = context__.vals_r("subject_scale");
        pos__ = 0U;
        validate_non_negative_index("subject_scale", "D", D);
        context__.validate_dims("initialization", "subject_scale", "vector_d", context__.to_vec(D));
        vector_d subject_scale(static_cast<Eigen::VectorXd::Index>(D));
        for (int j1__ = 0U; j1__ < D; ++j1__)
            subject_scale(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0.0,subject_scale);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable subject_scale: ") + e.what());
        }

        if (!(context__.contains_r("subject_mu_raw")))
            throw std::runtime_error("variable subject_mu_raw missing");
        vals_r__ = context__.vals_r("subject_mu_raw");
        pos__ = 0U;
        validate_non_negative_index("subject_mu_raw", "D", D);
        validate_non_negative_index("subject_mu_raw", "n_subject", n_subject);
        context__.validate_dims("initialization", "subject_mu_raw", "matrix_d", context__.to_vec(D,n_subject));
        matrix_d subject_mu_raw(static_cast<Eigen::VectorXd::Index>(D),static_cast<Eigen::VectorXd::Index>(n_subject));
        for (int j2__ = 0U; j2__ < n_subject; ++j2__)
            for (int j1__ = 0U; j1__ < D; ++j1__)
                subject_mu_raw(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(subject_mu_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable subject_mu_raw: ") + e.what());
        }

        if (!(context__.contains_r("subject_L")))
            throw std::runtime_error("variable subject_L missing");
        vals_r__ = context__.vals_r("subject_L");
        pos__ = 0U;
        validate_non_negative_index("subject_L", "D", D);
        validate_non_negative_index("subject_L", "D", D);
        context__.validate_dims("initialization", "subject_L", "matrix_d", context__.to_vec(D,D));
        matrix_d subject_L(static_cast<Eigen::VectorXd::Index>(D),static_cast<Eigen::VectorXd::Index>(D));
        for (int j2__ = 0U; j2__ < D; ++j2__)
            for (int j1__ = 0U; j1__ < D; ++j1__)
                subject_L(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(subject_L);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable subject_L: ") + e.what());
        }

        if (!(context__.contains_r("item_scale")))
            throw std::runtime_error("variable item_scale missing");
        vals_r__ = context__.vals_r("item_scale");
        pos__ = 0U;
        validate_non_negative_index("item_scale", "D", D);
        context__.validate_dims("initialization", "item_scale", "vector_d", context__.to_vec(D));
        vector_d item_scale(static_cast<Eigen::VectorXd::Index>(D));
        for (int j1__ = 0U; j1__ < D; ++j1__)
            item_scale(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0.0,item_scale);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable item_scale: ") + e.what());
        }

        if (!(context__.contains_r("item_mu_raw")))
            throw std::runtime_error("variable item_mu_raw missing");
        vals_r__ = context__.vals_r("item_mu_raw");
        pos__ = 0U;
        validate_non_negative_index("item_mu_raw", "D", D);
        validate_non_negative_index("item_mu_raw", "n_item", n_item);
        context__.validate_dims("initialization", "item_mu_raw", "matrix_d", context__.to_vec(D,n_item));
        matrix_d item_mu_raw(static_cast<Eigen::VectorXd::Index>(D),static_cast<Eigen::VectorXd::Index>(n_item));
        for (int j2__ = 0U; j2__ < n_item; ++j2__)
            for (int j1__ = 0U; j1__ < D; ++j1__)
                item_mu_raw(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(item_mu_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable item_mu_raw: ") + e.what());
        }

        if (!(context__.contains_r("item_L")))
            throw std::runtime_error("variable item_L missing");
        vals_r__ = context__.vals_r("item_L");
        pos__ = 0U;
        validate_non_negative_index("item_L", "D", D);
        validate_non_negative_index("item_L", "D", D);
        context__.validate_dims("initialization", "item_L", "matrix_d", context__.to_vec(D,D));
        matrix_d item_L(static_cast<Eigen::VectorXd::Index>(D),static_cast<Eigen::VectorXd::Index>(D));
        for (int j2__ = 0U; j2__ < D; ++j2__)
            for (int j1__ = 0U; j1__ < D; ++j1__)
                item_L(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(item_L);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable item_L: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  condition_omega;
            (void) condition_omega;  // dummy to suppress unused var warning
            if (jacobian__)
                condition_omega = in__.corr_matrix_constrain(D,lp__);
            else
                condition_omega = in__.corr_matrix_constrain(D);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_raw;
            (void) theta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_raw = in__.vector_constrain((n_orders - 1),lp__);
            else
                theta_raw = in__.vector_constrain((n_orders - 1));

            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > zeta_raw;
            size_t dim_zeta_raw_0__ = D;
            zeta_raw.reserve(dim_zeta_raw_0__);
            for (size_t k_0__ = 0; k_0__ < dim_zeta_raw_0__; ++k_0__) {
                if (jacobian__)
                    zeta_raw.push_back(in__.matrix_constrain((n_condition - 2),n_orders,lp__));
                else
                    zeta_raw.push_back(in__.matrix_constrain((n_condition - 2),n_orders));
            }

            Eigen::Matrix<T__,1,Eigen::Dynamic>  intercept;
            (void) intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                intercept = in__.row_vector_constrain(D,lp__);
            else
                intercept = in__.row_vector_constrain(D);

            Eigen::Matrix<T__,1,Eigen::Dynamic>  condition_mu_raw;
            (void) condition_mu_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                condition_mu_raw = in__.row_vector_constrain(D,lp__);
            else
                condition_mu_raw = in__.row_vector_constrain(D);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  subject_scale;
            (void) subject_scale;  // dummy to suppress unused var warning
            if (jacobian__)
                subject_scale = in__.vector_lb_constrain(0.0,D,lp__);
            else
                subject_scale = in__.vector_lb_constrain(0.0,D);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  subject_mu_raw;
            (void) subject_mu_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                subject_mu_raw = in__.matrix_constrain(D,n_subject,lp__);
            else
                subject_mu_raw = in__.matrix_constrain(D,n_subject);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  subject_L;
            (void) subject_L;  // dummy to suppress unused var warning
            if (jacobian__)
                subject_L = in__.cholesky_corr_constrain(D,lp__);
            else
                subject_L = in__.cholesky_corr_constrain(D);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  item_scale;
            (void) item_scale;  // dummy to suppress unused var warning
            if (jacobian__)
                item_scale = in__.vector_lb_constrain(0.0,D,lp__);
            else
                item_scale = in__.vector_lb_constrain(0.0,D);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  item_mu_raw;
            (void) item_mu_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                item_mu_raw = in__.matrix_constrain(D,n_item,lp__);
            else
                item_mu_raw = in__.matrix_constrain(D,n_item);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  item_L;
            (void) item_L;  // dummy to suppress unused var warning
            if (jacobian__)
                item_L = in__.cholesky_corr_constrain(D,lp__);
            else
                item_L = in__.cholesky_corr_constrain(D);


            // transformed parameters
            current_statement_begin__ = 73;
            validate_non_negative_index("theta_log", "n_orders", n_orders);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_log(static_cast<Eigen::VectorXd::Index>(n_orders));
            (void) theta_log;  // dummy to suppress unused var warning

            stan::math::initialize(theta_log, DUMMY_VAR__);
            stan::math::fill(theta_log,DUMMY_VAR__);
            stan::math::assign(theta_log,log_softmax(append_row(0,theta_raw)));
            current_statement_begin__ = 74;
            validate_non_negative_index("lps", "n_orders", n_orders);
            validate_non_negative_index("lps", "n", n);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  lps(static_cast<Eigen::VectorXd::Index>(n_orders),static_cast<Eigen::VectorXd::Index>(n));
            (void) lps;  // dummy to suppress unused var warning

            stan::math::initialize(lps, DUMMY_VAR__);
            stan::math::fill(lps,DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("log_lik", "n", n);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  log_lik(static_cast<Eigen::VectorXd::Index>(n));
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("condition_mu_ordered", "n_condition", n_condition);
            validate_non_negative_index("condition_mu_ordered", "D", D);
            validate_non_negative_index("condition_mu_ordered", "n_orders", n_orders);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > condition_mu_ordered(n_orders, (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(n_condition),static_cast<Eigen::VectorXd::Index>(D))));
            stan::math::initialize(condition_mu_ordered, DUMMY_VAR__);
            stan::math::fill(condition_mu_ordered,DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("zeta", "(n_condition - 1)", (n_condition - 1));
            validate_non_negative_index("zeta", "n_orders", n_orders);
            validate_non_negative_index("zeta", "D", D);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > zeta(D, (Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>((n_condition - 1)),static_cast<Eigen::VectorXd::Index>(n_orders))));
            stan::math::initialize(zeta, DUMMY_VAR__);
            stan::math::fill(zeta,DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("cumulative_sum_softmax_zeta", "(n_condition - 1)", (n_condition - 1));
            validate_non_negative_index("cumulative_sum_softmax_zeta", "D", D);
            validate_non_negative_index("cumulative_sum_softmax_zeta", "n_orders", n_orders);
            vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > cumulative_sum_softmax_zeta(D, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(n_orders, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((n_condition - 1)))))));
            stan::math::initialize(cumulative_sum_softmax_zeta, DUMMY_VAR__);
            stan::math::fill(cumulative_sum_softmax_zeta,DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("subject_mu", "n_subject", n_subject);
            validate_non_negative_index("subject_mu", "D", D);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  subject_mu(static_cast<Eigen::VectorXd::Index>(n_subject),static_cast<Eigen::VectorXd::Index>(D));
            (void) subject_mu;  // dummy to suppress unused var warning

            stan::math::initialize(subject_mu, DUMMY_VAR__);
            stan::math::fill(subject_mu,DUMMY_VAR__);
            stan::math::assign(subject_mu,transpose(multiply(diag_pre_multiply(subject_scale,subject_L),subject_mu_raw)));
            current_statement_begin__ = 80;
            validate_non_negative_index("item_mu", "n_item", n_item);
            validate_non_negative_index("item_mu", "D", D);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  item_mu(static_cast<Eigen::VectorXd::Index>(n_item),static_cast<Eigen::VectorXd::Index>(D));
            (void) item_mu;  // dummy to suppress unused var warning

            stan::math::initialize(item_mu, DUMMY_VAR__);
            stan::math::fill(item_mu,DUMMY_VAR__);
            stan::math::assign(item_mu,transpose(multiply(diag_pre_multiply(item_scale,item_L),item_mu_raw)));


            current_statement_begin__ = 82;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 83;
                stan::math::assign(get_base1_lhs(zeta,d,"zeta",1), append_row(zeroes_order,get_base1(zeta_raw,d,"zeta_raw",1)));
            }
            current_statement_begin__ = 89;
            for (int order = 1; order <= n_orders; ++order) {

                current_statement_begin__ = 90;
                for (int d = 1; d <= D; ++d) {

                    current_statement_begin__ = 91;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(cumulative_sum_softmax_zeta,d,"cumulative_sum_softmax_zeta",1),order,"cumulative_sum_softmax_zeta",2), cumulative_sum(softmax(col(get_base1(zeta,d,"zeta",1),order))));
                }
                current_statement_begin__ = 94;
                stan::math::assign(get_base1_lhs(condition_mu_ordered,order,"condition_mu_ordered",1), append_row(intercept,append_col(multiply(get_base1(condition_mu_raw,1,"condition_mu_raw",1),get_base1(get_base1(cumulative_sum_softmax_zeta,1,"cumulative_sum_softmax_zeta",1),order,"cumulative_sum_softmax_zeta",2)),multiply(get_base1(condition_mu_raw,2,"condition_mu_raw",1),get_base1(get_base1(cumulative_sum_softmax_zeta,2,"cumulative_sum_softmax_zeta",1),order,"cumulative_sum_softmax_zeta",2)))));
                current_statement_begin__ = 98;
                stan::model::assign(lps, 
                            stan::model::cons_list(stan::model::index_uni(order), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            add(get_base1(theta_log,order,"theta_log",1),biprobit_lpdf_vector(y,add(add(stan::model::rvalue(subject_mu, stan::model::cons_list(stan::model::index_multi(subject), stan::model::nil_index_list()), "subject_mu"),stan::model::rvalue(item_mu, stan::model::cons_list(stan::model::index_multi(item), stan::model::nil_index_list()), "item_mu")),append_col(multiply(get_base1(get_base1(X,order,"X",1),1,"X",2),stan::model::rvalue(condition_mu_ordered, stan::model::cons_list(stan::model::index_uni(order), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), "condition_mu_ordered")),multiply(get_base1(get_base1(X,order,"X",1),2,"X",2),stan::model::rvalue(condition_mu_ordered, stan::model::cons_list(stan::model::index_uni(order), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), "condition_mu_ordered")))),get_base1(condition_omega,1,2,"condition_omega",1), pstream__)), 
                            "assigning variable lps");
            }
            current_statement_begin__ = 102;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 103;
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_sum_exp(col(lps,i)));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < n_orders; ++i0__) {
                if (stan::math::is_uninitialized(theta_log(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_log" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < n_orders; ++i0__) {
                for (int i1__ = 0; i1__ < n; ++i1__) {
                    if (stan::math::is_uninitialized(lps(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: lps" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n; ++i0__) {
                if (stan::math::is_uninitialized(log_lik(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_lik" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < n_orders; ++i0__) {
                for (int i1__ = 0; i1__ < n_condition; ++i1__) {
                    for (int i2__ = 0; i2__ < D; ++i2__) {
                        if (stan::math::is_uninitialized(condition_mu_ordered[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: condition_mu_ordered" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < D; ++i0__) {
                for (int i1__ = 0; i1__ < (n_condition - 1); ++i1__) {
                    for (int i2__ = 0; i2__ < n_orders; ++i2__) {
                        if (stan::math::is_uninitialized(zeta[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: zeta" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < D; ++i0__) {
                for (int i1__ = 0; i1__ < n_orders; ++i1__) {
                    for (int i2__ = 0; i2__ < (n_condition - 1); ++i2__) {
                        if (stan::math::is_uninitialized(cumulative_sum_softmax_zeta[i0__][i1__](i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: cumulative_sum_softmax_zeta" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }
            for (int i0__ = 0; i0__ < n_subject; ++i0__) {
                for (int i1__ = 0; i1__ < D; ++i1__) {
                    if (stan::math::is_uninitialized(subject_mu(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: subject_mu" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n_item; ++i0__) {
                for (int i1__ = 0; i1__ < D; ++i1__) {
                    if (stan::math::is_uninitialized(item_mu(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: item_mu" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 73;
            current_statement_begin__ = 74;
            current_statement_begin__ = 75;
            current_statement_begin__ = 76;
            current_statement_begin__ = 77;
            current_statement_begin__ = 78;
            current_statement_begin__ = 79;
            current_statement_begin__ = 80;

            // model body

            current_statement_begin__ = 110;
            lp_accum__.add(normal_log<propto__>(intercept, 0, get_base1(priors,1,"priors",1)));
            current_statement_begin__ = 111;
            lp_accum__.add(normal_log<propto__>(condition_mu_raw, 0, get_base1(priors,2,"priors",1)));
            current_statement_begin__ = 112;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 113;
                lp_accum__.add(normal_log<propto__>(to_vector(get_base1(zeta_raw,d,"zeta_raw",1)), 0, get_base1(priors,3,"priors",1)));
            }
            current_statement_begin__ = 116;
            lp_accum__.add(gamma_log<propto__>(subject_scale, get_base1(priors,4,"priors",1), get_base1(priors,5,"priors",1)));
            current_statement_begin__ = 117;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(subject_L, get_base1(priors,6,"priors",1)));
            current_statement_begin__ = 118;
            lp_accum__.add(normal_log<propto__>(to_vector(subject_mu_raw), 0, 1));
            current_statement_begin__ = 119;
            lp_accum__.add(gamma_log<propto__>(item_scale, get_base1(priors,4,"priors",1), get_base1(priors,5,"priors",1)));
            current_statement_begin__ = 120;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(item_L, get_base1(priors,6,"priors",1)));
            current_statement_begin__ = 121;
            lp_accum__.add(normal_log<propto__>(to_vector(item_mu_raw), 0, 1));
            current_statement_begin__ = 123;
            lp_accum__.add(lkj_corr_log<propto__>(condition_omega, get_base1(priors,6,"priors",1)));
            current_statement_begin__ = 125;
            lp_accum__.add(normal_log<propto__>(theta_raw, 0, get_base1(priors,7,"priors",1)));
            current_statement_begin__ = 127;
            lp_accum__.add(sum(log_lik));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("condition_omega");
        names__.push_back("theta_raw");
        names__.push_back("zeta_raw");
        names__.push_back("intercept");
        names__.push_back("condition_mu_raw");
        names__.push_back("subject_scale");
        names__.push_back("subject_mu_raw");
        names__.push_back("subject_L");
        names__.push_back("item_scale");
        names__.push_back("item_mu_raw");
        names__.push_back("item_L");
        names__.push_back("theta_log");
        names__.push_back("lps");
        names__.push_back("log_lik");
        names__.push_back("condition_mu_ordered");
        names__.push_back("zeta");
        names__.push_back("cumulative_sum_softmax_zeta");
        names__.push_back("subject_mu");
        names__.push_back("item_mu");
        names__.push_back("condition_rho");
        names__.push_back("theta");
        names__.push_back("subject_rho");
        names__.push_back("item_rho");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_orders - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back((n_condition - 2));
        dims__.push_back(n_orders);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(n_subject);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(n_item);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_orders);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_orders);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_orders);
        dims__.push_back(n_condition);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back((n_condition - 1));
        dims__.push_back(n_orders);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(n_orders);
        dims__.push_back((n_condition - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_subject);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_item);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_orders);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_bivariate_probit_mixed_onec_mo_nonc_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        matrix_d condition_omega = in__.corr_matrix_constrain(D);
        vector_d theta_raw = in__.vector_constrain((n_orders - 1));
        vector<matrix_d> zeta_raw;
        size_t dim_zeta_raw_0__ = D;
        for (size_t k_0__ = 0; k_0__ < dim_zeta_raw_0__; ++k_0__) {
            zeta_raw.push_back(in__.matrix_constrain((n_condition - 2),n_orders));
        }
        row_vector_d intercept = in__.row_vector_constrain(D);
        row_vector_d condition_mu_raw = in__.row_vector_constrain(D);
        vector_d subject_scale = in__.vector_lb_constrain(0.0,D);
        matrix_d subject_mu_raw = in__.matrix_constrain(D,n_subject);
        matrix_d subject_L = in__.cholesky_corr_constrain(D);
        vector_d item_scale = in__.vector_lb_constrain(0.0,D);
        matrix_d item_mu_raw = in__.matrix_constrain(D,n_item);
        matrix_d item_L = in__.cholesky_corr_constrain(D);
            for (int k_1__ = 0; k_1__ < D; ++k_1__) {
                for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(condition_omega(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < (n_orders - 1); ++k_0__) {
            vars__.push_back(theta_raw[k_0__]);
            }
            for (int k_2__ = 0; k_2__ < n_orders; ++k_2__) {
                for (int k_1__ = 0; k_1__ < (n_condition - 2); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                    vars__.push_back(zeta_raw[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(intercept[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(condition_mu_raw[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(subject_scale[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < n_subject; ++k_1__) {
                for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(subject_mu_raw(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < D; ++k_1__) {
                for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(subject_L(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(item_scale[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < n_item; ++k_1__) {
                for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(item_mu_raw(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < D; ++k_1__) {
                for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(item_L(k_0__, k_1__));
                }
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 73;
            validate_non_negative_index("theta_log", "n_orders", n_orders);
            vector_d theta_log(static_cast<Eigen::VectorXd::Index>(n_orders));
            (void) theta_log;  // dummy to suppress unused var warning

            stan::math::initialize(theta_log, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(theta_log,DUMMY_VAR__);
            stan::math::assign(theta_log,log_softmax(append_row(0,theta_raw)));
            current_statement_begin__ = 74;
            validate_non_negative_index("lps", "n_orders", n_orders);
            validate_non_negative_index("lps", "n", n);
            matrix_d lps(static_cast<Eigen::VectorXd::Index>(n_orders),static_cast<Eigen::VectorXd::Index>(n));
            (void) lps;  // dummy to suppress unused var warning

            stan::math::initialize(lps, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(lps,DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("log_lik", "n", n);
            vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n));
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(log_lik,DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("condition_mu_ordered", "n_condition", n_condition);
            validate_non_negative_index("condition_mu_ordered", "D", D);
            validate_non_negative_index("condition_mu_ordered", "n_orders", n_orders);
            vector<matrix_d> condition_mu_ordered(n_orders, (matrix_d(static_cast<Eigen::VectorXd::Index>(n_condition),static_cast<Eigen::VectorXd::Index>(D))));
            stan::math::initialize(condition_mu_ordered, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(condition_mu_ordered,DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("zeta", "(n_condition - 1)", (n_condition - 1));
            validate_non_negative_index("zeta", "n_orders", n_orders);
            validate_non_negative_index("zeta", "D", D);
            vector<matrix_d> zeta(D, (matrix_d(static_cast<Eigen::VectorXd::Index>((n_condition - 1)),static_cast<Eigen::VectorXd::Index>(n_orders))));
            stan::math::initialize(zeta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(zeta,DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("cumulative_sum_softmax_zeta", "(n_condition - 1)", (n_condition - 1));
            validate_non_negative_index("cumulative_sum_softmax_zeta", "D", D);
            validate_non_negative_index("cumulative_sum_softmax_zeta", "n_orders", n_orders);
            vector<vector<vector_d> > cumulative_sum_softmax_zeta(D, (vector<vector_d>(n_orders, (vector_d(static_cast<Eigen::VectorXd::Index>((n_condition - 1)))))));
            stan::math::initialize(cumulative_sum_softmax_zeta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(cumulative_sum_softmax_zeta,DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("subject_mu", "n_subject", n_subject);
            validate_non_negative_index("subject_mu", "D", D);
            matrix_d subject_mu(static_cast<Eigen::VectorXd::Index>(n_subject),static_cast<Eigen::VectorXd::Index>(D));
            (void) subject_mu;  // dummy to suppress unused var warning

            stan::math::initialize(subject_mu, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(subject_mu,DUMMY_VAR__);
            stan::math::assign(subject_mu,transpose(multiply(diag_pre_multiply(subject_scale,subject_L),subject_mu_raw)));
            current_statement_begin__ = 80;
            validate_non_negative_index("item_mu", "n_item", n_item);
            validate_non_negative_index("item_mu", "D", D);
            matrix_d item_mu(static_cast<Eigen::VectorXd::Index>(n_item),static_cast<Eigen::VectorXd::Index>(D));
            (void) item_mu;  // dummy to suppress unused var warning

            stan::math::initialize(item_mu, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(item_mu,DUMMY_VAR__);
            stan::math::assign(item_mu,transpose(multiply(diag_pre_multiply(item_scale,item_L),item_mu_raw)));


            current_statement_begin__ = 82;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 83;
                stan::math::assign(get_base1_lhs(zeta,d,"zeta",1), append_row(zeroes_order,get_base1(zeta_raw,d,"zeta_raw",1)));
            }
            current_statement_begin__ = 89;
            for (int order = 1; order <= n_orders; ++order) {

                current_statement_begin__ = 90;
                for (int d = 1; d <= D; ++d) {

                    current_statement_begin__ = 91;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(cumulative_sum_softmax_zeta,d,"cumulative_sum_softmax_zeta",1),order,"cumulative_sum_softmax_zeta",2), cumulative_sum(softmax(col(get_base1(zeta,d,"zeta",1),order))));
                }
                current_statement_begin__ = 94;
                stan::math::assign(get_base1_lhs(condition_mu_ordered,order,"condition_mu_ordered",1), append_row(intercept,append_col(multiply(get_base1(condition_mu_raw,1,"condition_mu_raw",1),get_base1(get_base1(cumulative_sum_softmax_zeta,1,"cumulative_sum_softmax_zeta",1),order,"cumulative_sum_softmax_zeta",2)),multiply(get_base1(condition_mu_raw,2,"condition_mu_raw",1),get_base1(get_base1(cumulative_sum_softmax_zeta,2,"cumulative_sum_softmax_zeta",1),order,"cumulative_sum_softmax_zeta",2)))));
                current_statement_begin__ = 98;
                stan::model::assign(lps, 
                            stan::model::cons_list(stan::model::index_uni(order), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            add(get_base1(theta_log,order,"theta_log",1),biprobit_lpdf_vector(y,add(add(stan::model::rvalue(subject_mu, stan::model::cons_list(stan::model::index_multi(subject), stan::model::nil_index_list()), "subject_mu"),stan::model::rvalue(item_mu, stan::model::cons_list(stan::model::index_multi(item), stan::model::nil_index_list()), "item_mu")),append_col(multiply(get_base1(get_base1(X,order,"X",1),1,"X",2),stan::model::rvalue(condition_mu_ordered, stan::model::cons_list(stan::model::index_uni(order), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), "condition_mu_ordered")),multiply(get_base1(get_base1(X,order,"X",1),2,"X",2),stan::model::rvalue(condition_mu_ordered, stan::model::cons_list(stan::model::index_uni(order), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), "condition_mu_ordered")))),get_base1(condition_omega,1,2,"condition_omega",1), pstream__)), 
                            "assigning variable lps");
            }
            current_statement_begin__ = 102;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 103;
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_sum_exp(col(lps,i)));
            }

            // validate transformed parameters
            current_statement_begin__ = 73;
            current_statement_begin__ = 74;
            current_statement_begin__ = 75;
            current_statement_begin__ = 76;
            current_statement_begin__ = 77;
            current_statement_begin__ = 78;
            current_statement_begin__ = 79;
            current_statement_begin__ = 80;

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < n_orders; ++k_0__) {
            vars__.push_back(theta_log[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_orders; ++k_0__) {
                vars__.push_back(lps(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }
            for (int k_2__ = 0; k_2__ < D; ++k_2__) {
                for (int k_1__ = 0; k_1__ < n_condition; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < n_orders; ++k_0__) {
                    vars__.push_back(condition_mu_ordered[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < n_orders; ++k_2__) {
                for (int k_1__ = 0; k_1__ < (n_condition - 1); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                    vars__.push_back(zeta[k_0__](k_1__, k_2__));
                    }
                }
            }
            for (int k_2__ = 0; k_2__ < (n_condition - 1); ++k_2__) {
                for (int k_1__ = 0; k_1__ < n_orders; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                    vars__.push_back(cumulative_sum_softmax_zeta[k_0__][k_1__][k_2__]);
                    }
                }
            }
            for (int k_1__ = 0; k_1__ < D; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_subject; ++k_0__) {
                vars__.push_back(subject_mu(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < D; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_item; ++k_0__) {
                vars__.push_back(item_mu(k_0__, k_1__));
                }
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 131;
            double condition_rho(0.0);
            (void) condition_rho;  // dummy to suppress unused var warning

            stan::math::initialize(condition_rho, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(condition_rho,DUMMY_VAR__);
            stan::math::assign(condition_rho,get_base1(condition_omega,1,2,"condition_omega",1));
            current_statement_begin__ = 132;
            validate_non_negative_index("theta", "n_orders", n_orders);
            vector_d theta(static_cast<Eigen::VectorXd::Index>(n_orders));
            (void) theta;  // dummy to suppress unused var warning

            stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(theta,DUMMY_VAR__);
            stan::math::assign(theta,exp(theta_log));
            current_statement_begin__ = 133;
            double subject_rho(0.0);
            (void) subject_rho;  // dummy to suppress unused var warning

            stan::math::initialize(subject_rho, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(subject_rho,DUMMY_VAR__);
            current_statement_begin__ = 134;
            double item_rho(0.0);
            (void) item_rho;  // dummy to suppress unused var warning

            stan::math::initialize(item_rho, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(item_rho,DUMMY_VAR__);


            {
            current_statement_begin__ = 137;
            validate_non_negative_index("Sigma", "D", D);
            validate_non_negative_index("Sigma", "D", D);
            matrix_d Sigma(static_cast<Eigen::VectorXd::Index>(D),static_cast<Eigen::VectorXd::Index>(D));
            (void) Sigma;  // dummy to suppress unused var warning

            stan::math::initialize(Sigma, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Sigma,DUMMY_VAR__);


            current_statement_begin__ = 138;
            stan::math::assign(Sigma, multiply_lower_tri_self_transpose(subject_L));
            current_statement_begin__ = 139;
            stan::math::assign(subject_rho, get_base1(Sigma,1,2,"Sigma",1));
            current_statement_begin__ = 140;
            stan::math::assign(Sigma, multiply_lower_tri_self_transpose(item_L));
            current_statement_begin__ = 141;
            stan::math::assign(item_rho, get_base1(Sigma,1,2,"Sigma",1));
            }

            // validate generated quantities
            current_statement_begin__ = 131;
            check_greater_or_equal(function__,"condition_rho",condition_rho,-(1));
            check_less_or_equal(function__,"condition_rho",condition_rho,1);
            current_statement_begin__ = 132;
            current_statement_begin__ = 133;
            check_greater_or_equal(function__,"subject_rho",subject_rho,-(1.0));
            check_less_or_equal(function__,"subject_rho",subject_rho,1.0);
            current_statement_begin__ = 134;
            check_greater_or_equal(function__,"item_rho",item_rho,-(1.0));
            check_less_or_equal(function__,"item_rho",item_rho,1.0);

            // write generated quantities
        vars__.push_back(condition_rho);
            for (int k_0__ = 0; k_0__ < n_orders; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }
        vars__.push_back(subject_rho);
        vars__.push_back(item_rho);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_bivariate_probit_mixed_onec_mo_nonc";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= D; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "condition_omega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (n_orders - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_2__ = 1; k_2__ <= n_orders; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (n_condition - 2); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "zeta_raw" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "intercept" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "condition_mu_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "subject_scale" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_subject; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "subject_mu_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= D; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "subject_L" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "item_scale" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_item; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "item_mu_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= D; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "item_L" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_orders; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_log" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_orders; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lps" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_2__ = 1; k_2__ <= D; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= n_condition; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_orders; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "condition_mu_ordered" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= n_orders; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (n_condition - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "zeta" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (n_condition - 1); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= n_orders; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cumulative_sum_softmax_zeta" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= D; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_subject; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "subject_mu" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= D; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_item; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "item_mu" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "condition_rho";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_orders; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "subject_rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "item_rho";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= ((D * (D - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "condition_omega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_orders - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_2__ = 1; k_2__ <= n_orders; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (n_condition - 2); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "zeta_raw" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "intercept" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "condition_mu_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "subject_scale" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_subject; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "subject_mu_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((D * (D - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "subject_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "item_scale" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_item; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "item_mu_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((D * (D - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "item_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_orders; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_log" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_orders; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lps" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_2__ = 1; k_2__ <= D; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= n_condition; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_orders; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "condition_mu_ordered" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= n_orders; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (n_condition - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "zeta" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= (n_condition - 1); ++k_2__) {
            for (int k_1__ = 1; k_1__ <= n_orders; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cumulative_sum_softmax_zeta" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= D; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_subject; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "subject_mu" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= D; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_item; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "item_mu" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "condition_rho";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_orders; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "subject_rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "item_rho";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_bivariate_probit_mixed_onec_mo_nonc_namespace::model_bivariate_probit_mixed_onec_mo_nonc stan_model;


#endif
